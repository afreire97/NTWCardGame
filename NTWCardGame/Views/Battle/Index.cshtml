@model NTWCardGame.Domain.Battle.Battle

@{
    ViewData["Title"] = "Batalla";
}

<link rel="stylesheet" href="~/css/battle/battle.css" />

<div id="battle-container">
    <h1 class="battle-title">Batalla contra los enemigos</h1>

    <div id="enemy-info">
        <h2>Enemigos</h2>
        <div class="enemy-list">
            @foreach (var enemy in Model.Enemies)
            {
                <div class="enemy-card" id="enemy-@enemy.Id" data-id="@enemy.Id" onclick="selectEnemy(@enemy.Id)">
                    <img src="~/avatars/@enemy.AvatarImage" alt="Avatar del enemigo" class="enemy-avatar" />
                    <h3>@enemy.Name</h3>
                    <p>Salud: <span class="enemy-health">@enemy.Health</span></p>
                </div>
            }
        </div>
    </div>

    <div id="player-info">
        <img src="~/avatars/@Model.Player.AvatarImage" alt="Avatar del jugador" class="player-avatar" />
        <h2>Jugador: @Model.Player.Name</h2>
        <p>Salud: <span id="player-health">@Model.Player.Health</span></p>
        <p>Mana: <span id="player-mana">@Model.Player.Mana</span></p>
    </div>
    <div id="battle-log-container">
        <h3>Registro de Combate</h3>
        <ul id="battle-log">
            @foreach (var logEntry in Model.BattleLog)
            {
                <li>Turno @logEntry.Turn: @logEntry.Message</li>
            }
        </ul>
    </div>

    <div id="battle-result" style="display:none;">
        <h2 id="battle-result-message"></h2>
        <button id="restart-button" style="display:none;" onclick="restartBattle()">Reiniciar Batalla</button>
    </div>


    <div id="action-panel" style="display:none;">
        <h3>Acciones del Jugador</h3>
        <button class="action-button" onclick="playerAttack()">Atacar</button>
        <!-- Puedes añadir más botones de acciones (habilidades, objetos, etc.) -->
    </div>

    <div id="turn-info">
        <h3>Información del Turno</h3>
        <p>Turno actual: <span id="current-turn-info"></span></p>
    </div>
</div>

<script>
    let battleData = {
        playerId: '@Model.Player.Id',
        enemies: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Enemies)),
        selectedEnemyId: null // Variable para almacenar el ID del enemigo seleccionado
    };

    // Función para seleccionar un enemigo
    function selectEnemy(enemyId) {
        battleData.selectedEnemyId = enemyId; // Guardar el ID del enemigo seleccionado
        // Resaltar el enemigo seleccionado (opcional)
        document.querySelectorAll('.enemy-card').forEach(card => {
            card.classList.remove('selected');
        });
        document.getElementById(`enemy-${enemyId}`).classList.add('selected'); // Resaltar enemigo seleccionado
    }

    // Función para refrescar la UI después de cada acción
    function updateBattleUI(data) {

        document.getElementById('player-health').innerText = data.player.health;
        document.getElementById('player-mana').innerText = data.player.mana;

        data.enemies.forEach(enemy => {
            let enemyElement = document.querySelector(`#enemy-${enemy.id} .enemy-health`);
            if (enemyElement) {
                enemyElement.innerText = enemy.health;
            }
        });

        if (data.isBattleOver) {
            document.getElementById('action-panel').style.display = 'none';
            document.getElementById('battle-result').style.display = 'block';

            if (data.isVictory) {
                document.getElementById('battle-result-message').innerText = "¡Victoria! Todos los enemigos han sido derrotados.";
            } else {
                document.getElementById('battle-result-message').innerText = "Has sido derrotado. Mejor suerte la próxima vez.";
            }

            document.getElementById('restart-button').style.display = 'block';
            return;
        }

   
        document.getElementById('current-turn-info').innerText = data.turnInfo.currentCharacter.name;
    
        // Mostrar panel de acciones solo si es el turno del jugador
        if (data.turnInfo.isPlayerTurn) {
            document.getElementById('action-panel').style.display = 'block';
        } else {
            document.getElementById('action-panel').style.display = 'none';
        }

        // Actualizar el registro de combate
        let battleLogContainer = document.getElementById('battle-log');
        battleLogContainer.innerHTML = ''; // Limpiar log anterior
        data.battleLog.forEach(logEntry => {
            let logItem = document.createElement('li');
            logItem.textContent = `Turno ${logEntry.turn}: ${logEntry.message}`;
            battleLogContainer.appendChild(logItem);
        });
    }

    // Reiniciar batalla (puedes implementarlo como desees)
    function restartBattle() {
        window.location.href = '/Battle/Index'; // Volver al inicio de la batalla
    }

    // Inicia una acción de ataque por parte del jugador
    function playerAttack() {
        if (!battleData.selectedEnemyId) {
            alert("Por favor, selecciona un enemigo antes de atacar."); // Mensaje de advertencia si no se selecciona un enemigo
            return;
        }
        postPlayerAction("attack", battleData.selectedEnemyId);
    }

    // Envía la acción del jugador al servidor
    function postPlayerAction(actionType, targetId) {
        fetch('/Battle/PlayerAction', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                actionType: actionType,
                targetId: targetId
            })
        })
            .then(response => response.json())
            .then(data => {
                updateBattleUI(data);
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }

    // Inicialización de la batalla (cargar el turno actual)
    document.addEventListener("DOMContentLoaded", function () {
        fetch('/Battle/GetCurrentTurn')
            .then(response => response.json())
            .then(data => {
                updateBattleUI(data);
            })
            .catch(error => {
                console.error('Error:', error);
            });
    });
</script>
